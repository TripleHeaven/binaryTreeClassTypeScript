{"version":3,"sources":["classes/BinaryTreeNode.ts","classes/BinaryTree.ts","classes/Output.ts","classes/app.ts"],"names":[],"mappings":";;;;;;ACAA,ADEA,AEDA,ACDA,IFAA,ADEA,AEDA,ACDA,MDCA,EFCA,IGFA,GAAA,CFAA,GAAA,GEAA,CAAA,GFAA,CAAA,UEAA,CAAA,OFAA,CAAA;ADEA,AEDA;ADCA,ADAA,AEDA,ACCA,IFAA,AEAA,QHAA,AEDA,ACCA,EFAA,CEAA,OAAA,CAAA,UAAA,CAAA;AFAA,AD6BI,AE9BJ,WAAA,MAAA,GAAA,CAKC;ADJD,AD8BI,AG3BJ,IAAI,OH2BA,AG3BO,CFHX,EEGc,IAAI,CH2Bd,CAAY,KAAZ,CG3Bc,CH2BM,AG3BN,MAAJ,EAAd;AFwOI,AD5ME,AE/BF,ACIJ,EDJI,ECIA,EAAE,EDJF,CF+BO,AE/BP,ACIK,EFuOL,EEvOS,EH2BP,GAAc,AE/BhB,CAAA,ED2OA,ED5ME,CC4MF,CC3OA,ACIS,CAAA,EDJT,QCIK,EDJE,ACIX,MDJI,EAAyB,WAAzB,EAA0C;ADU1C,ADsBE,AE/BE,ACMR,EAAE,CAAC,KDNS,CF+BD,GGzBX,CAAa,CHyBP,AGzBN,GHyBmB,IAAb,GE/BsB,GAAG,QAAQ,CAAC,cAAT,CAAwB,MAAxB,CAAvB;ADUI,ADsBN,AE/BE,ACMR,EAAE,CAAC,CDNK,KDSI,ADsBD,GGzBX,CFGY,AEHC,CAAb,CHyBM,CCtBa,EAAP,ADsBQ,CC0MhB,CA5NA,ACboB,CAAC,CF+BnB,QE/BE,GAA6B,WAAW,CAAC,QAAZ,EAA7B;AFgCH,AE/BA,ACML,EAAE,CDTE,ACSD,SAAH,CAAa,CAAb;AFOY,AENZ,EAAE,CAAC,MFMS,GENZ,CAAa,CFMD,AENZ,GFMoB,EAAR,CA2NR,CAvNA;ADjBA,AECJ,ACOA,EHRI,AGQF,CAAC,KHRC,CAAA,AECJ,GCOA,CAAa,EDPb,ACOA,QHRI,CAAW,QAAA,CAAA,SAAX,EAAW,OAAX,EAAgB;ACkBR,ACtBZ,ACaA,CDbA,CCaE,CDbF,ACaG,MFSS,ADlBR,GGSJ,CAAa,CFSD,CETZ,EFSoB,EAAR,CAsNR,CAlNA,GDtBA;AACE,AGSN,EAAE,CAAC,SAAH,CHTa,AGSA,EAAb,GHTkB,AGUlB,MHVM;ACsBM,ADrBP,AEPG,KFKY,EELZ,CAAA,CD4BI,KC5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","file":"app.a1ed33e4.js","sourceRoot":"..","sourcesContent":["import {BinaryTree} from \"./BinaryTree\"\nexport {TreeNode};\nclass TreeNode<T> {\n    // Getting values of the node\n    private _value: T;\n    public get value(): T {\n      return this._value;\n    }\n    // Setting the value of the node\n    public set value(v: T) {\n      this._value = v;\n    }\n  \n    // Property to hold reference to the left child node\n    private _left: TreeNode<T>;\n    public get left(): TreeNode<T> {\n      return this._left;\n    }\n    public set left(node: TreeNode<T>) {\n      this._left = node;\n    }\n  \n    // Property to hold reference to the right child node\n    private _right: TreeNode<T>;\n    public get right(): TreeNode<T> {\n      return this._right;\n    }\n    public set right(v: TreeNode<T>) {\n      this._right = v;\n    }\n  \n    // Initialize a new node\n    constructor(value: T) {\n      this._value = value;\n      this._left = null;\n      this._right = null;\n    }\n  }","import {TreeNode} from \"./BinaryTreeNode\";\nexport {BinaryTree};\nclass BinaryTree<T> {\n    // Property to hold a reference to the root node of the tree\n    private _root: TreeNode<T>;\n    private _balancen: boolean;\n    public get balancen(): boolean{\n      return this._balancen;\n    }\n    public set balancen(b : boolean){\n      this._balancen = b;\n    }\n    // Straight Traversal String\n    private _sts = \"\";\n    public get sts(): string {\n      return this._sts;\n    }\n    // Simmetrical Traversal String\n    private _sits = \"\";\n    public get sits() : string {\n      return this._sits;\n    }\n    // Back order Traversal String\n    private _bots = \"\";\n    public get bots() : string {\n      return this._bots;\n    }\n    // Broad Width Traversal String\n    private _bfsStr = \"\";\n    public get bfsStr () : string {\n      return this._bfsStr;\n    }\n    // method for adding to a string\n    strAppend (str : string, v : string, separator=\"\") : string{\n      return str+separator+v;\n    }\n    SimmetricalTraversal(node = this._root) : boolean{\n      if (node == null){\n        return false;\n      }\n      else{\n        let l = (node.left != null) ? this.SimmetricalTraversal(node.left) : false;\n        this._sits = this.strAppend(this.sits, node.value.toString(), \" \");\n        let r = (node.right != null) ? this.SimmetricalTraversal(node.right) : false;\n      }\n    }\n    StraightTraversal(node = this._root) : boolean{\n      if (node==null){\n        return false;\n      }\n      else{\n        this._sts = this.strAppend(this.sts,node.value.toString(), \" \");\n        let l = (node.left!= null) ? this.StraightTraversal(node.left) : false;\n        let r = (node.right!= null) ? this.StraightTraversal(node.right) : false;\n      }\n    }\n    BackOrderTraversal (node = this._root) : boolean {\n      if (node == null){\n        return false;\n      }\n      else{\n        let l = (node.left != null) ? this.BackOrderTraversal(node.left) : false;\n        let r = (node.right != null) ? this.BackOrderTraversal(node.right) : false;\n        this._bots = this.strAppend(this.bots, node.value.toString(), \" \");\n      }\n    }\n    BFS (node = this._root) : boolean {\n      let queue = [];\n      if (node == null){\n        return null;\n      }\n      else{\n        queue.push(node);\n\n        while (queue.length > 0){\n          let tmp = queue.shift();\n          this._bfsStr = this.strAppend(this.bfsStr, tmp.value.toString(),\" \");\n          if (tmp.left!=null){\n            queue.push(tmp.left);\n          }\n          if (tmp.right!=null){\n            queue.push(tmp.right);\n          }\n        }\n\n      }\n    }\n    \n    public get root(): TreeNode<T> {\n      return this._root;\n    }\n    public set root(v: TreeNode<T>) {\n      this._root = v;\n    }\n    // minValue\n    minValue (root : TreeNode<T>){\n      let minv = root.value;\n      while (root.left != null){\n        minv = root.left.value;\n        root = root.left;\n      }\n      return minv\n    }\n    // recursive method to delete the node \n    deleteKey (value : any){\n      this.root = this.deleteRec(this.root, value);\n    }\n    deleteRec (root: TreeNode<T>, value : any): TreeNode<T>{\n      // if tree is empty\n      if (root == null) {\n        return null;\n      }\n      \n      if (value < root.value){\n        root.left = this.deleteRec(root.left,value);\n      }\n      else if (value > root.value){\n        root.right = this.deleteRec(root.right, value);\n      }\n\n      // root = root's key , it's to be deleted then\n      else{\n        // node with only one child or no child\n        \n        if (root.left == null){\n          return root.right;\n        }\n        else if (root.right == null){\n          return root.left;\n        }\n\n        // two children\n        root.value = this.minValue(root.right);\n\n        // delete unapropriate child\n        root.right = this.deleteRec(root.right, root.value);\n      }\n      return root;\n    }\n    // recursive method of getting the Depth of the whole Tree\n    treeDepth(node : TreeNode<T>): number {\n        // checking if the tree is empty\n        if (node != null){\n            let leftDepth = (node.left != null) ? this.treeDepth(node.left) : 0;\n            let rightDepth = (node.right != null) ? this.treeDepth(node.right) : 0;\n            return ((leftDepth > rightDepth) ? leftDepth : rightDepth) + 1\n        }\n        else{\n            return 0;\n        }\n    }\n    //balancing Stuff\n    // in the task we balancing tree when we adding a new node if the bool balance is true\n    balanceFactor (p : TreeNode<T>){\n      return (this.treeDepth(p.left) - this.treeDepth(p.right));\n    }\n    rotateRight(p : TreeNode<T>){\n      let q = p.left;\n      p.left = q.right;\n      q.right = p;\n      return q;\n    }\n    rotateLeft(q : TreeNode<T>){\n      let p = q.right;\n      q.right = p.left;\n      p.left = q;\n      return p;\n    }\n    balance (p : TreeNode<T>){\n      if (this.balanceFactor(p) == 2){\n        if (this.balanceFactor(p.right) < 0 ){\n          p.right = this.rotateRight(p.right);\n        }\n        return (this.rotateLeft(p));\n      }\n      if (this.balanceFactor(p) == -2){\n        if (this.balanceFactor(p.left) > 0){\n          p.left = this.rotateLeft(p.left);\n        }\n        return (this.rotateRight(p));\n      }\n      return p;      \n    }\n    leafCount (node = this._root): number {\n      if (node == null){\n        return 0;\n      }\n      else{\n        if (node.left == null && node.right == null){\n          return 1;\n        }\n        return this.leafCount(node.left) + this.leafCount(node.right);\n      }\n    }\n    addToTree(value: T): boolean {\n        // Create a new node\n        const newNode = new TreeNode(value);\n    \n        // If tree is empty, set new node as root\n        if (this._root == null) {\n          this._root = newNode;\n          return true;\n        } else {\n          // If tree is not empty, find the right spot for the new node\n          let currentNode = this._root;\n          let traversing = true;\n          while (traversing) {\n            if (currentNode.value == newNode.value) {\n              //Assumption: Duplicates are not accepted.\n              traversing = false;\n              return false;\n            } else if (newNode.value < currentNode.value) {\n              // Traverse left of the node\n              if (currentNode.left == null) {\n                //Add to the left of the current node\n                currentNode.left = newNode;\n                traversing = false;\n                return true;\n              } else {\n                //Traverse the left of the current node\n                currentNode = currentNode.left;\n              }\n            } else if (newNode.value > currentNode.value) {\n              // Traverse right of the node\n              if (currentNode.right == null) {\n                //Add to the right of the current node\n                currentNode.right = newNode;\n                traversing = false;\n                return true;\n              } else {\n                //Traverse the left of the current node\n                currentNode = currentNode.right;\n              }\n            }\n          }\n        }\n      }\n    constructor() {\n      this._root = null;\n    }\n  }","export {Output};\nclass Output{\n    toShow(idElem : string , valueToShow : any) {\n        let outsideLabelShow = document.getElementById(idElem)\n        outsideLabelShow.innerHTML = valueToShow.toString();\n    }\n}","import {BinaryTree} from \"./BinaryTree\";\nimport {TreeNode} from \"./BinaryTreeNode\";\nimport {Output} from \"./Output\";\n\n\nlet forShow = new Output();\nlet bt = new BinaryTree();\n\n\nbt.addToTree(5);\nbt.addToTree(2);\nbt.addToTree(6);\nbt.addToTree(7);\nbt.addToTree(11);\nbt.addToTree(15);\nbt.addToTree(10);\n//bt.balance(bt.root);\n\n\nlet depth = bt.treeDepth(bt.root);\nlet lc = bt.leafCount();\n\nbt.StraightTraversal();\nbt.SimmetricalTraversal();\nbt.BackOrderTraversal();\nbt.BFS();\n\n\nforShow.toShow(\"depth\",depth);\nforShow.toShow(\"leafcount\", lc);\nforShow.toShow(\"straightTraversal\", bt.sts);\nforShow.toShow(\"simmetricalTraversal\",bt.sits);\nforShow.toShow(\"backorderTraversal\", bt.bots);\nforShow.toShow(\"broadwidthTraversal\", bt.bfsStr);"]}