{"version":3,"sources":["classes/BinaryTreeNode.ts","classes/BinaryTree.ts","classes/Output.ts","classes/taskConcordance.ts","classes/drawing.ts","classes/app.ts"],"names":[],"mappings":";;;;;;ACAA,ADEA,AEDA,AGDA,ADEA,ADDA,IFDA,ADEA,AEDA,AGDA,ADEA,ADDA,MDAA,CECA,CJAA,IKFA,GAAA,AFCA,CFDA,GAAA,GIAA,CAAA,GJAA,CAAA,UIAA,CAAA,OJAA,CAAA;ADEA,AEDA,AECA,ADDA;AFGA,ADFA,AEDA,AGCA,ADAA,ADDA,IFGA,AIFA,QLAA,AEDA,AGCA,ADAA,ADDA,EFGA,CIFA,OAAA,CAAA,UAAA,CAAA;AJEA,ADgCI,AEnCJ,AEII,ADDA,WDHJ,AEII,ADDA,MDHJ,CEII,CAAa,CFJjB,CAKC,IEDG,CDDA,CCCuC,ADD3B,OAAZ,EAA8B,QAA9B,EAA+C;AFAnD,ADiCI,AKlCJ,ADGQ,ADDA,IEFR,IFEY,CCCC,EJ+BT,CCjCJ,GGEQ,GAAc,CJ+BlB,CAAY,CKlChB,GAAA,ADGQ,CJ+BJ,AGhCyB,EHgCL,CGhCQ,GEFhC,CAAA,IFEwC,CAAC,cEFzC,AFEgC,CEFhC,AFEwD,OAAxB,CAAxB,CAD2C,CAE3C;AFwSJ,ADxQE,AEpCF,AEKI,EFLJ,MAAA,CFoCO,AEpCP,AEKS,EHuST,CGvSI,GJ+BF,AI/Ba,GJ+BC,AEpChB,CAAA,ED4SA,AGvSqB,CHuST,AGvSU,CJ+BpB,CCwQF,CC5SA,CD4S8B,EC5S9B,IEKe,CAAkB,IAAlB,CFLR,AEKH,MFLJ,EAAyB,WAAzB,EAA0C;AD4S9B,ADvQV,AEpCE,AGCR,ADIQ,ADDA,IEHR,IJ0SgB,AC3SJ,CFoCD,AI/BE,ADDA,CFuSG,EGtSR,CCJR,ADIiB,CJ+BX,CCuQU,CI1ShB,CLmCmB,GCuQH,AEvSR,CFuSQ,ADvQV,CI/BE,CHsSQ,AI1ShB,AFG2B,CDJC,AGC5B,CDI6B,EFLE,KEKvB,GFL+B,AGCvC,CHDwC,AGCxC,IFG4C,CAAC,KAArC,CAH2C,CAI3C,EDLuB,CAAwB,MAAxB,CAAvB;AD2SQ,ADtQV,AEpCE,AEKA,IFLA,ED0SQ,EAAA,CDtQL,AI/BE,EHqSG,CGrSR,CAAS,EHqSD,ADtQV,GAAc,EEpCI,CAAC,AEKjB,CJ+BF,AI/BoB,CAAlB,EAAqB,CAArB,EAAwB,EFLxB,GAA6B,CEKC,CAAC,KAA/B,EAAsC,EFLE,CAAC,GEKG,CAAC,IFLhB,EAA7B,AEKA;AHqS0B,ADrQ7B,AEpCA,AGCL,ADIK,ADDG,GDPJ,CGIA,CJwS8B,CA/R9B,GENS,EEHF,GAAG,AFGN,GAAa,CEHH,IFGQ,IEHR,CAAA,MAAJ,AFGO,CAAiB,CEHtC,IFGqB,CAAuB,GAAvB,CAAb;AEFR,AFGQ,IEHJ,IFGQ,MEHE,GAAG,IAAI,IFGQ,GAAG,EEHX,CAAA,KFGmB,CAAC,CEHxB,CAAY,QAAQ,CAAC,GFGN,CAAwB,QAAxB,CAAxB,CEHqB,CAAwB,YAAxB,CAAZ,CAAjB;ALFI,AECJ,AGEA,ADIA,ADDQ,EHNJ,EKGA,AFGI,EEHF,ELHF,CAAA,AECJ,AGES,ADIT,ICJa,EHFb,CEMA,KDDyB,CAAC,CHNtB,CAAW,CKGF,CAAA,KFGL,CHNO,CAAA,CGMuB,EEH7B,CAAe,EFGmB,GHNvC,EAAW,AGMuB,CAAW,EEHxC,CAAT,GLHI,EAAgB,AGMkB,GAAsB,iBAAtB,EAA9B;AFKI,ACfZ,AECA,ADUK,CDXL,AECA,EFDA,AECA,MHcY,ADXR,ICWQ,GAAO,EAAP,CA8RsB,CA1R9B,IDfA;AACE,AKIN,QAAQ,CAAC,ILJI,KAAK,KKIlB,CLJM,AKIkB,SAAxB,EAAmC,OAAnC,GAA6C,SAAS,WAAT,GAAoB;AJWrD,ADdP,AEPG,AGWJ,ADVI,ADYR,KHRoB,CKMZ,CHXA,AECA,CFDA,AECA,CHoBI,AERZ,GEFc,EJUF,ACrBJ,CGWS,ADVT,EHoBY,ACrBZ,CECA,CHoBI,AIVS,CJmSa,CArR9B,ECzBI,CCaR,CCZQ,WCUa,CAAA,eAAJ,CAAoB,WAApB,EAAgC,YAAhC,CAAb;ALHA,AKIA,AFXJ,CAAA,EAAA,MEWW,IAAP;AJcQ,AIbX,CAHD,QJgBY,ADjBR,KCiBQ,GAAQ,EAAR,CAoRsB,CAhR9B,CDrBiB,CAAjB,EAAqB;AACnB,AGVE,OAAA,CAAA,GHUG,MAAL,GAAc,CAAd,EGVE,GAAA,eAAA;AF+BI,ADpBP,AKIL,KLVoB,GKUZ,CJgBI,AIhBH,OJgBG,GAAU,EAAV,EIhBZ,CAAwB,MAAxB,EAAgC,OAAhC,GAA0C,SAAS,IAAT,GAAa;AJgSjD,AI/RF,EAAA,EAAE,CAAC,IJ+RI,KAAL,CI/RF,EJ+Re,GD1SC,CC0Sd;AACA,AI/RF,MAAI,GJ+RG,EAAL,GAAU,CI/RC,CJ+RX,EI/Rc,EAAE,CAAC,MAAH,EAAhB;AJgSC,AD5Se,AKahB,GLbA,GKaI,CAAC,GAAG,CAAR;ALHA,AKKA,ELLA,MAAA,CAAA,AKKO,IAAP,ULLA,CAAW,QAAA,CAAA,SAAX,EAAW,MAAX,EAAe;ACNf,AIYH,CAND,CJNI,MAAA,CAAA,ADMA,cCNA,CAAW,ADMX,UCNW,CAAA,SAAX,EAAW,UAAX,EAAmB;ADOjB,SCPF,IDOS,KAAK,KAAZ,CCPF;AACE,ADOD,AKOL,EAAE,CAAC,ELTgB,OKSnB,CJda,AIcA,CAAb,IJdkB,SAAZ;AACD,AIcL,KJhBuB,IDSnB,aAAgB,IAAhB,EAAiC;AAC/B,SCPF,EDOO,KAAL,GAAa,GCPK,CAApB,ADOE,ECP6B;AAC7B,ADOD,KALc,MCFR,SAAL,GAAiB,CAAjB;AACD,KALkB,eDMJ;oBCNI;ADMJ,GAAf;ACNmB,ADenB,EAAA,CCfA,KDeA,CAAA,cAAA,CAAW,QAAA,CAAA,SAAX,EAAW,OAAX,EAAgB;ACPhB,EAAA,MAAA,CAAA,ADOA,cCPA,CAAW,ADOX,UCPW,CAAA,SAAX,EAAW,KAAX,EAAc;ADQZ,SCRF,IDQS,KAAK,MCRd,ADQE;ACPA,ADQD,AKOL,EAAE,CAAC,ELTiB,KKSpB,CAAW,EJfE,AIeA,CAAC,IJfI,AIelB,IJfM;AACD,AIiBL,IAAI,CJnBc,IDUd,AKSK,GAAG,EAAE,CAAC,OLTM,CAAjB,CKSQ,CLTuB,AKSV,EAAE,CAAC,IAAhB,CAAZ;ALRM,AKSN,IAAI,EAAE,GAAG,ELTE,AKSA,CAAC,KLTN,GCXY,ADWE,CAAd,AKSG,EAAT;ALRK,AKUL,EAAE,CAAC,ELfiB,eKepB;AJtBkB,AIuBlB,EAAE,CJvBE,AIuBD,iBLhBiB,GKgBpB;AJlBI,AImBJ,EJnBI,AImBF,CAAC,KJnBC,CAAA,YImBJ,EJnBI,CAAW,UAAA,CAAA,SAAX,EAAW,MAAX,EAAe;ADEC,AKkBpB,EAAE,CLlBE,AKkBD,GAAH,G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","file":"app.a1ed33e4.js","sourceRoot":"..","sourcesContent":["import {BinaryTree} from \"./BinaryTree\"\nexport {TreeNode};\nclass TreeNode<T> {\n    // Getting values of the node\n    private _value: T;\n    public get value(): T {\n      return this._value;\n    }\n    // Setting the value of the node\n    public set value(v: T) {\n      this._value = v;\n    }\n    \n    // Property to hold reference to the left child node\n    private _left: TreeNode<T>;\n    public get left(): TreeNode<T> {\n      return this._left;\n    }\n    public set left(node: TreeNode<T>) {\n      this._left = node;\n    }\n  \n    // Property to hold reference to the right child node\n    private _right: TreeNode<T>;\n    public get right(): TreeNode<T> {\n      return this._right;\n    }\n    public set right(v: TreeNode<T>) {\n      this._right = v;\n    }\n    \n    // forDrawing\n    index : number;\n    depthNode : number;\n\n\n    // Initialize a new node\n    constructor(value: T) {\n      this._value = value;\n      this._left = null;\n      this._right = null;\n    }\n  }","import {TreeNode} from \"./BinaryTreeNode\";\nimport { Drawing } from \"./drawing\";\nexport {BinaryTree};\n\nclass BinaryTree<T> {\n    // Property to hold a reference to the root node of the tree\n    //forDrawing\n    private _root: TreeNode<T>;\n    private _balancen: boolean;\n    public get balancen(): boolean{\n      return this._balancen;\n    }\n    public set balancen(b : boolean){\n      this._balancen = b;\n    }\n    // Straight Traversal String\n    private _sts = \"\";\n    public get sts(): string {\n      return this._sts;\n    }\n    // Simmetrical Traversal String\n    private _sits = \"\";\n    public get sits() : string {\n      return this._sits;\n    }\n    // Back order Traversal String\n    private _bots = \"\";\n    public get bots() : string {\n      return this._bots;\n    }\n    // Broad Width Traversal String\n    private _bfsStr = \"\";\n    public get bfsStr () : string {\n      return this._bfsStr;\n    }\n    \n    // method for adding to a string\n    strAppend (str : string, v : string, separator=\"\") : string{\n      return str+separator+v;\n    }\n    SimmetricalTraversal(node = this._root) : boolean{\n      if (node == null){\n        return false;\n      }\n      else{\n        let l = (node.left != null) ? this.SimmetricalTraversal(node.left) : false;\n        this._sits = this.strAppend(this.sits, node.value.toString(), \" \");\n        let r = (node.right != null) ? this.SimmetricalTraversal(node.right) : false;\n      }\n    }\n    StraightTraversal(node = this._root) : boolean{\n      if (node==null){\n        return false;\n      }\n      else{\n        this._sts = this.strAppend(this.sts,node.value.toString(), \" \");\n        let l = (node.left!= null) ? this.StraightTraversal(node.left) : false;\n        let r = (node.right!= null) ? this.StraightTraversal(node.right) : false;\n      }\n    }\n    BackOrderTraversal (node = this._root) : boolean {\n      if (node == null){\n        return false;\n      }\n      else{\n        let l = (node.left != null) ? this.BackOrderTraversal(node.left) : false;\n        let r = (node.right != null) ? this.BackOrderTraversal(node.right) : false;\n        this._bots = this.strAppend(this.bots, node.value.toString(), \" \");\n      }\n    }\n    BFS (node = this._root) : boolean {\n      let queue = [];\n      if (node == null){\n        return null;\n      }\n      else{\n        queue.push(node);\n\n        while (queue.length > 0){\n          let tmp = queue.shift();\n          this._bfsStr = this.strAppend(this.bfsStr, tmp.value.toString(),\" \");\n          if (tmp.left!=null){\n            queue.push(tmp.left);\n          }\n          if (tmp.right!=null){\n            queue.push(tmp.right);\n          }\n        }\n\n      }\n    }\n    \n    public get root(): TreeNode<T> {\n      return this._root;\n    }\n    public set root(v: TreeNode<T>) {\n      this._root = v;\n    }\n    // minValue\n    minValue (root : TreeNode<T>){\n      let minv = root.value;\n      while (root.left != null){\n        minv = root.left.value;\n        root = root.left;\n      }\n      return minv\n    }\n    // recursive method to delete the node \n    deleteKey (value : any){\n      this.root = this.deleteRec(this.root, value);\n    }\n    deleteRec (root: TreeNode<T>, value : any): TreeNode<T>{\n      // if tree is empty\n      if (root == null) {\n        return null;\n      }\n      \n      if (value < root.value){\n        root.left = this.deleteRec(root.left,value);\n      }\n      else if (value > root.value){\n        root.right = this.deleteRec(root.right, value);\n      }\n\n      // root = root's key , it's to be deleted then\n      else{\n        // node with only one child or no child\n        \n        if (root.left == null){\n          return root.right;\n        }\n        else if (root.right == null){\n          return root.left;\n        }\n\n        // two children\n        root.value = this.minValue(root.right);\n\n        // delete unapropriate child\n        root.right = this.deleteRec(root.right, root.value);\n      }\n      return root;\n    }\n    // recursive method of getting the Depth of the whole Tree\n    treeDepth(node : TreeNode<T>): number {\n        // checking if the tree is empty\n        if (node != null){\n            let leftDepth = (node.left != null) ? this.treeDepth(node.left) : 0;\n            let rightDepth = (node.right != null) ? this.treeDepth(node.right) : 0;\n            return ((leftDepth > rightDepth) ? leftDepth : rightDepth) + 1\n        }\n        else{\n            return 0;\n        }\n    }\n    //balancing Stuff\n    // in the task we balancing tree when we adding a new node if the bool balance is true\n    balanceFactor (p : TreeNode<T>){\n      return (this.treeDepth(p.left) - this.treeDepth(p.right));\n    }\n    rotateRight(p : TreeNode<T>){\n      let q = p.left;\n      p.left = q.right;\n      q.right = p;\n      return q;\n    }\n    rotateLeft(q : TreeNode<T>){\n      let p = q.right;\n      q.right = p.left;\n      p.left = q;\n      return p;\n    }\n    balance (p : TreeNode<T>){\n      if (this.balanceFactor(p) == 2){\n        if (this.balanceFactor(p.right) < 0 ){\n          p.right = this.rotateRight(p.right);\n        }\n        return (this.rotateLeft(p));\n      }\n      if (this.balanceFactor(p) == -2){\n        if (this.balanceFactor(p.left) > 0){\n          p.left = this.rotateLeft(p.left);\n        }\n        return (this.rotateRight(p));\n      }\n      return p;      \n    }\n    leafCount (node = this._root): number {\n      if (node == null){\n        return 0;\n      }\n      else{\n        if (node.left == null && node.right == null){\n          return 1;\n        }\n        return this.leafCount(node.left) + this.leafCount(node.right);\n      }\n    }\n    addToTree(value: T): boolean {\n        // Create a new node\n        const newNode = new TreeNode(value);\n    \n        // If tree is empty, set new node as root\n        if (this._root == null) {\n          this._root = newNode;\n          return true;\n        } else {\n          // If tree is not empty, find the right spot for the new node\n          let currentNode = this._root;\n          let traversing = true;\n          while (traversing) {\n            if (currentNode.value == newNode.value) {\n              //Assumption: Duplicates are not accepted.\n              traversing = false;\n              return false;\n            } else if (newNode.value < currentNode.value) {\n              // Traverse left of the node\n              if (currentNode.left == null) {\n                //Add to the left of the current node\n                currentNode.left = newNode;\n                traversing = false;\n                return true;\n              } else {\n                //Traverse the left of the current node\n                currentNode = currentNode.left;\n              }\n            } else if (newNode.value > currentNode.value) {\n              // Traverse right of the node\n              if (currentNode.right == null) {\n                //Add to the right of the current node\n                currentNode.right = newNode;\n                traversing = false;\n                return true;\n              } else {\n                //Traverse the left of the current node\n                currentNode = currentNode.right;\n              }\n            }\n          }\n        }\n      }\n      position (depth : number, index : number, dr : Drawing){\n        let x = (index * dr.canvas.width )/ Math.pow(2,depth) + 1 ;\n        let y = (depth * dr.canvas.height)/ (this.treeDepth(this.root));\n        return [x,y]\n      }\n      BFSpos (node = this._root) : boolean {\n        let queue = [];\n        let pos = [];\n        if (node == null){\n          return null;\n        }\n        else{\n          queue.push(node);\n  \n          while (queue.length > 0){\n            let tmp = queue.shift();\n            this._bfsStr = this.strAppend(this.bfsStr, tmp.value.toString(),\" \");\n            pos.push(this.position(tmp.depthNode,tmp.index,this.dr));\n            if (tmp.left!=null){\n              queue.push(tmp.left);\n            }\n            if (tmp.right!=null){\n              queue.push(tmp.right);\n            }\n          }\n  \n        }\n      }\n      BFSDrawing (node = this._root) : boolean {\n        let queue = [];\n        if (node == null){\n          return null;\n        }\n        else{\n          queue.push(node);\n  \n          while (queue.length > 0){\n            let tmp = queue.shift();\n            if (tmp == this.root){\n              this.root.index = 1;\n            }\n            else {\n              if (tmp.left!=null){\n                tmp.left.index = tmp.index * 2 - 2;\n              }\n              if (tmp.right!= null){\n                tmp.right.index = tmp.index * 2;\n              }\n            }\n            tmp.depthNode = this.treeDepth(this.root) - this.treeDepth(tmp);\n            if (tmp.left!=null){\n              queue.push(tmp.left);\n            }\n            if (tmp.right!=null){\n              queue.push(tmp.right);\n            }\n          }\n  \n        }\n      }\n    dr : Drawing;\n    constructor(dr: Drawing = null) {\n      this._root = null;\n      this.dr = dr;\n    }\n  }","export {Output};\nclass Output{\n    toShow(idElem : string , valueToShow : any) {\n        let outsideLabelShow = document.getElementById(idElem)\n        outsideLabelShow.innerHTML = valueToShow.toString();\n    }\n}","export {taskConcordance};\nclass taskConcordance{\n    givenString : string;\n    words : Array<string>;\n    constructor(idInput : string, idOutput : string){\n        let outsideLabelInput = document.getElementById(idInput);\n        //outsideLabelShow.innerHTML = valueToShow.toString();\n        this.givenString = outsideLabelInput.value;\n        // Splitting the words into an array\n        this.words = this.givenString.split(\" \");\n        let outsideLabeslShow = document.getElementById(idOutput); \n        outsideLabeslShow.innerHTML = this.words.toString().toLocaleLowerCase();\n    }\n}","import {TreeNode} from \"./BinaryTreeNode\";\nexport {Drawing};\nclass Drawing{\n    canvas : HTMLCanvasElement;\n    ctx : CanvasRenderingContext2D;\n    constructor (canvas : HTMLCanvasElement){\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\");\n        this.ctx.fillStyle = \"black\";\n        this.ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n}","import {BinaryTree} from \"./BinaryTree\";\nimport {TreeNode} from \"./BinaryTreeNode\";\nimport {Output} from \"./Output\";\nimport {taskConcordance} from \"./taskConcordance\";\nimport {Drawing} from \"./drawing\";\n\nlet forShow = new Output();\nlet forDrawing = new Drawing(document.getElementById(\"forDrawing\"));\nlet bt = new BinaryTree(forDrawing);\n\ndocument.getElementById(\"doInput\").onclick = function concordance(){\n    let ccrdnc = new taskConcordance(\"inputConc\",\"outputConc\");\n    return null;\n}\n\ndocument.getElementById(\"draw\").onclick = function draw(){\n    bt.BFSDrawing();\n    let positions = bt.BFSpos();\n    let a = 5;\n\n    return null;\n}\n\n\nbt.addToTree(5);\n/*\nbt.addToTree(2);\nbt.addToTree(6);\nbt.addToTree(7);\nbt.addToTree(11);\nbt.addToTree(15);\nbt.addToTree(10);\n*/\nbt.balance(bt.root);\n\n\nlet depth = bt.treeDepth(bt.root);\nlet lc = bt.leafCount();\n\nbt.StraightTraversal();\nbt.SimmetricalTraversal();\nbt.BackOrderTraversal();\nbt.BFS();\n\n\nforShow.toShow(\"depth\",depth);\nforShow.toShow(\"leafcount\", lc);\nforShow.toShow(\"straightTraversal\", bt.sts);\nforShow.toShow(\"simmetricalTraversal\",bt.sits);\nforShow.toShow(\"backorderTraversal\", bt.bots);\nforShow.toShow(\"broadwidthTraversal\", bt.bfsStr);"]}