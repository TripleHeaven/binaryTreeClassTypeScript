{"version":3,"sources":["classes/BinaryTreeNode.ts","classes/BinaryTree.ts","classes/Output.ts","classes/taskConcordance.ts","classes/drawing.ts","classes/app.ts"],"names":[],"mappings":";;;;;;ACAA,ADEA,AEDA,AGDA,ADEA,ADDA,IFDA,ADEA,AEDA,AGDA,ADEA,ADDA,MDAA,CECA,CJAA,IKFA,GAAA,AFCA,CFDA,GAAA,GIAA,CAAA,GJAA,CAAA,UIAA,CAAA,OJAA,CAAA;ADEA,AEDA,AECA,ADDA;AFGA,ADFA,AEDA,AGCA,ADAA,ADDA,IFGA,AIFA,QLAA,AEDA,AGCA,ADAA,ADDA,EFGA,CIFA,OAAA,CAAA,UAAA,CAAA;AJEA,ADmCI,AEtCJ,AEII,ADDA,WDHJ,AEII,ADDA,MDHJ,CEII,CAAa,CFJjB,CAKC,IEDG,CDDA,CCCuC,ADD3B,OAAZ,EAA8B,QAA9B,EAA+C;AFAnD,ADoCI,AKrCJ,ADGQ,ADDA,IEFR,IFEY,CCCC,EJkCT,CCpCJ,GGEQ,GAAc,CJkClB,CAAY,CKrChB,GAAA,ADGQ,CJkCJ,AGnCyB,EHmCL,CGnCQ,GEFhC,CAAA,IFEwC,CAAC,cEFzC,AFEgC,CEFhC,AFEwD,OAAxB,CAAxB,CAD2C,CAE3C;AF0XJ,ADvVE,AEvCF,AEKI,EFLJ,MAAA,CFuCO,AEvCP,AEKS,EHyXT,CGzXI,GJkCF,AIlCa,GJkCC,AEvChB,CAAA,ED8XA,AGzXqB,CHyXT,AGzXU,CJkCpB,CCuVF,CC9XA,CD8X8B,EC9X9B,IEKe,CAAkB,IAAlB,CFLR,AEKH,MFLJ,EAAyB,WAAzB,EAA0C;AD8X9B,ADtVV,AEvCE,AGCR,ADIQ,ADDA,IEHR,IJ4XgB,AC7XJ,CFuCD,AIlCE,ADDA,CFyXG,EGxXR,CCJR,ADIiB,CJkCX,CCsVU,CI5XhB,CLsCmB,GCsVH,AEzXR,CFyXQ,ADtVV,CIlCE,CHwXQ,AI5XhB,AFG2B,CDJC,AGC5B,CDI6B,EFLE,KEKvB,GFL+B,AGCvC,CHDwC,AGCxC,IFG4C,CAAC,KAArC,CAH2C,CAI3C,EDLuB,CAAwB,MAAxB,CAAvB;AD6XQ,ADrVV,AEvCE,AEKA,IFLA,ED4XQ,EAAA,CDrVL,AIlCE,EHuXG,CGvXR,CAAS,EHuXD,ADrVV,GAAc,EEvCI,CAAC,AEKjB,CJkCF,AIlCoB,CAAlB,EAAqB,CAArB,EAAwB,EFLxB,GAA6B,CEKC,CAAC,KAA/B,EAAsC,EFLE,CAAC,GEKG,CAAC,IFLhB,EAA7B,AEKA;AHuX0B,ADpV5B,AEvCD,AGCL,ADIK,ADDG,GDPJ,CGIA,CJ0X8B,CAjX9B,EENQ,CHmCD,CAAL,CKtCK,ELsCI,CAAT,AKtCQ,EFGM,EEHF,CFGK,CAAC,GAAD,EAAK,CEHV,CAAA,CFGK,EAAS,GEHlB,AFGS,EEHvB,AFGoC,GAAb,CAAf;AHoCF,AKtCN,AFGQ,IEHJ,KLsCO,AGnCE,CHmCP,GAAS,CAAT,AKtCQ,AFGN,GEHS,AFGI,IEHA,CFGK,QEHL,CAAA,EFGA,CAAiB,IEHrB,CAAY,AFGR,CAAuB,IAAvB,CAAb,CAN2C,CEGd,AFI7B,CEJ8B,cAAT,CAAwB,YAAxB,CAAZ,CAAjB;ALuCK,AExCL,AGEA,ADII,EAAA,ECJA,EAAE,GHFN,AGES,ADIL,CAAA,GCJS,EHFb,IEMI,CAAA,KCJS,CAAA,MDIT,GAAA,CCJK,CAAe,QDIP,ECJR,CAAT,MDII,EAAmC;AHI3B,ACfZ,AEYQ,ADDA,CDXR,EAAA,MDeY,AGHC,ADDA,IFID,AGHK,ADDA,CCCC,ADDA,EFIC,CGHE,ADDF,CFIP,AGHJ,ADDA,CFoX0B,CA5W9B,AGPqB,ADDF,CCCG,ADDF,GCCK,ADDF,KAAK,ICCM,CAAC,ADDZ,CAAW,KCC9B,CDDA,CCCwC,CAAC,ADDH,CAAC,CCCvC,CDDA,CCC4C,CDDF;AHL9C,AKGJ,ADIY,ADDA,EHNR,MAAA,AKGI,CLHJ,AKGK,EDIQ,ADDA,GCCL,CAAS,CDDT,CAAW,CAAX,IAAgB,CHNxB,AKGJ,CLHe,AKGS,ADIZ,GAAqB,ADDA,KHNlB,AGMa,CHNb,AKGf,AFGuC,CCC3B,ADDgB,CEHO,CFGO,MHNtC,AKGJ,ELHe,CKG8B,MLHzC,EAAgB,AGMQ,CEH0B,CFG1C,UEHiC,GAAoB;AJWrD,ACrBJ,AGWJ,ADIQ,ADDH,KAV0C,CEO3C,AFIA,CDfA,CAAA,CDqBI,ADdR,CIQY,ECJF,EJUF,ACrBJ,CGWS,ADII,EHMD,ACrBZ,CEegB,CHMZ,AIVS,ADIT,CHiXsB,CAvW9B,ECzBI,CFOJ,YKIiB,CAAA,eAAJ,CAAoB,WAApB,EAAgC,YAAhC,CAAb;ALHE,AKIF,ADIQ,SCJD,EDIM,EJRJ,AKIT,CDIQ,CAAS,GJRH,KIQN,CJRN,AIQwB,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAAlB,EAAmC,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAAnC,EAAoD,KAApD,EAA0D,KAA1D;AHUA,ADjBP,AKIJ,ADIW,CCPZ,ILHoB,ICmBR,EGTK,GHSL,AGTA,CAAS,EHSD,EAAR,AGTA,CH+WsB,CAlW9B,CGbwB,YAAhB;AJPR,AIQQ,ADFJ,QAAI,GCEK,GAAL,CAAS,IDFE,GAAG,CCEd,CAAkB,ADFtB,SCE+B,CAAC,CAAD,CAAT,CAAa,CAAb,CAAlB,EAAmC,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAAnC,EAAoD,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,IAAgB,EAApE;AHaA,AIhBZ,ADMS,QCND,CJgBI,ADpBR,AKIK,OJgBG,GAAU,EAAV,CDpBS,CAAjB,AKIJ,CAAwB,CLJC,KKIzB,EAAgC,OAAhC,GAA0C,SAAS,IAAT,GAAa;AJkXjD,ADrXA,AKIF,ADOC,ADNG,EEDJ,CDJA,CCIE,CAAC,IJiXI,AEhXE,EHLF,EGKM,CFgXX,AEhXY,CEDd,EJiXe,ADrXb,AGKe,CAAb,EHLY,AGKK,CFgXnB,ADrXA,AGKoB,GAAG,KAAK,KAAL,CAAW,MAAhC,EAAwC,CAAC,EAAzC,EAA6C;AFiX/C,ADrXD,AKID,AFCQ,KHXQ,CKUZ,GJiXG,CEhXK,CFgXV,GAAU,CIjXC,AFCI,CFgXf,EIjXc,EAAE,AFCN,CEDO,AFCI,CAAX,KEDI,AFCW,EED3B,AFCQ,EAAsB;AFiX7B,AI/WD,ADIA,ADLY,EECZ,ADIA,MDLY,CCKZ,CAAA,ECJU,CAAC,MDIX,ADLuB,CHZP,AIiBhB,ADLwB,IAAZ,CECZ,AFD6B,CECL,IFDU,KEClC,AFD6B,CAAW,CAAX,CAAjB,MCKZ,GAAA,UAAyB,SAAzB,EAA+C,CAE9C,CAFD;ACHA,AFDS,EECT,EAAE,CAAC,UAAH,CAAc,EAAE,CAAC,IAAjB,EAAsB,QAAQ,CAAC,cAAT,CAAwB,YAAxB,CAAtB;AJZA,ADFgB,AKehB,ADKJ,ADNS,EFZL,CDFA,KCEA,CAAA,AIaO,ADKX,ICLI,GDKJ,OHlBI,CAAW,UAAA,CAAA,SAAX,EAAW,UAAX,EAAmB;ADQnB,AKMH,ADrBD,CCaA,ADbA,CJeI,CIfJ,KJeI,CCRA,ADQA,cAAA,CCRA,ADQW,QAAA,CAAA,SAAX,EAAW,MAAX,EAAe;ACPb,AEYE,QAAI,CHLR,ICPS,KAAK,MDOd,CGKyB,EFZvB,CEY0B,QAAQ,CAAC,cAAT,CAAwB,QAAxB,CAAxB;AFXH,ADOC,AKMN,ADvBQ,ADsBA,IAAA,CFde,EGRf,CCuBA,ADvBA,CCuBC,ILNI,EIjBL,GJiBU,AIjBV,GDsBiB,CAAC,CHLpB,AKMN,CAAwB,CDvBhB,MDsBA,EECR,CFDsC,CECH,OAAnC,GAA6C,AFDI,CAAC,QECI,AFDhB,EAA9B,EECqC,GAAa;ALLrD,AKMD,AFDC,EECD,EAAE,CLRa,AKQZ,IJbH,GIaA,CAAW,EAAE,CAAC,IAAd,EJboB,CAApB,EAA+B;AAC7B,AIaF,EAAA,EAAE,CAAC,ILNH,ECPO,IIaP,KJbE,EDOc,CCPG,CAAjB,EDOF,EAAiC;ACNhC,ADOC,AKMF,AFFJ,KFhBuB,CIkBf,GFFR,EHJW,IKMM,CLNX,EKMc,CLND,CKMG,CAAC,ELNjB,CGIN,GEEoB,EAAhB;ALLC,AKMD,AF3BJ,CAAA,EAAA,EHgBmB,CKWX,CAAC,GAAG,CAAR,SJnBmB;AIqBnB,EAAA,UAAU,CAAC,OLbI,KKaf,CAAwB,SAAxB;AJrBmB,AIuBnB,AFhCI,GFSJ,IETI,CAAA,CEgCG,IAAP,UFhCI,GAAA,eAAA;AFiBJ,ADAe,AKgBlB,CATD,CJPI,CDAA,KCAA,CAAA,cAAA,CAAW,UAAA,CAAA,SAAX,EAAW,KAAX,EAAc;ADSd,EAAA,MAAA,CCTA,ADSA,cAAA,CCTA,ADSW,QAAA,CAAA,SAAX,EAAW,OAAX,EAAgB;ACRd,AIiBN,EAAE,CAAC,MLTC,GKSJ,CJjBa,AIiBA,CAAb,IJjBkB,IAAZ,EDQF;ACPC,ADQC,AKSN,EAAE,CAAC,EJnBe,OImBlB,CLTa,AKSA,CAAb,ILTkB,MAAZ;AACD,AKSL,EAAE,CAAC,ELXiB,OKWpB,CAAa,CAAb,MJpBkB;AIqBlB,EAAE,CAAC,MLTC,GKSJ,CAAa,CAAb,QLTqB,CAAjB,EAA+B;ACZjB,ADaZ,AKSN,EAAE,CJtBE,AIsBD,QLTQ,CKSX,CAAa,CAAb,GLTM,GAAc,CAAd;ACRF,ADSC,AKSL,EJlBI,AIkBF,CAAC,ELdiB,GCJhB,CAAA,GIkBJ,CAAa,CAAb,GACA,MJnBI,CAAW,UAAA,CAAA,SAAX,EAAW,MAAX,EAAe;SAAf,WDIgB,ICJhB;AACE,AImBN,EAAE,CAAC,SAAH,CJnBa,AImBA,GAAb,EJnBkB,KAAZ;AACD,ADEe,AKiBpB,EAAE,CLjBE,AKiBD,EJrBgB,OIqBnB,CAAa,CAAb;ALIE,AKHF,EAAE,CAAC,MLGD,GKHF,CAAa,CAAb,GLGE,GCzBiB;ADpBnB,AK2CA,CL3CA,CK2CE,CL3CF,AK2CG,SAAH,CAAa,EAAb;AJvBmB,AIyBnB,GJzBI,CIyBA,KAAK,GAAG,EAAE,CAAC,SAAH,CAAa,EAAE,CAAC,IAAhB,CAAZ;AJpBI,AD1BI,AK+CR,EJrBI,EIqBA,EAAE,CL/CE,CC0BJ,AD1BI,CC0BJ,AIqBK,EAAE,CAAC,IL/CJ,GAAA,EK+CC,EJrBL,AIqBJ,CJrBe,GD1BP,OC0BO,CAAA,SAAX,EAAW,MAAX,EAAe;AIuBnB,EAAE,CAAC,MJvBC,WIuBJ,IJvBI;AACE,AIuBN,EAAE,CAAC,UJvBU,KAAK,KAAZ,AIuBN;AJtBK,AIuBL,EAAE,CAAC,EJzBgB,gBIyBnB;AACA,EAAE,CAAC,GAAH,cJ1BmB;AI6BnB,OAAO,CAAC,MAAR,CAAe,OAAf,EAAuB,KAAvB;AJ7BmB,AI8BnB,GJ9BI,II8BG,CAAC,MAAR,CAAe,WAAf,EAA4B,EAA5B;AJzBI,AI0BJ,EJ1BI,KI0BG,CJ1BH,AI0BI,CJ1BJ,KI0BJ,CAAe,QJ1BX,CAAW,UAAA,AI0Bf,CJ1Be,CI0BqB,EAAE,CAAC,GAAvC,EJ1BI,EAAW,QAAX,EAAiB;AI2BrB,OAAO,CAAC,CJ3BJ,KI2BJ,CAAe,SJ3BX,aI2BJ,EAAsC,EAAE,CAAC,IAAzC;AJ1BM,AI2BN,OAAO,CAAC,KJ3BK,CI2Bb,CAAe,GJ3BG,OAAZ,UI2BN,EAAqC,EAAE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","file":"app.a1ed33e4.js","sourceRoot":"..","sourcesContent":["import {BinaryTree} from \"./BinaryTree\"\nexport {TreeNode};\nclass TreeNode<T> {\n    // Getting values of the node\n    x : number;\n    y : number;\n    private _value: T;\n    public get value(): T {\n      return this._value;\n    }\n    // Setting the value of the node\n    public set value(v: T) {\n      this._value = v;\n    }\n    \n    // Property to hold reference to the left child node\n    private _left: TreeNode<T>;\n    public get left(): TreeNode<T> {\n      return this._left;\n    }\n    public set left(node: TreeNode<T>) {\n      this._left = node;\n    }\n  \n    // Property to hold reference to the right child node\n    private _right: TreeNode<T>;\n    public get right(): TreeNode<T> {\n      return this._right;\n    }\n    public set right(v: TreeNode<T>) {\n      this._right = v;\n    }\n    \n    // forDrawing\n    index : number;\n    depthNode : number;\n    \n\n\n    // Initialize a new node\n    constructor(value: T) {\n      this._value = value;\n      this._left = null;\n      this._right = null;\n      this.x = 0;\n      this.y = 0;\n    }\n  }","import {TreeNode} from \"./BinaryTreeNode\";\nimport { Drawing } from \"./drawing\";\nexport {BinaryTree};\n\nclass BinaryTree<T> {\n    // Property to hold a reference to the root node of the tree\n    //forDrawing\n    private _root: TreeNode<T>;\n    private _balancen: boolean;\n    public get balancen(): boolean{\n      return this._balancen;\n    }\n    public set balancen(b : boolean){\n      this._balancen = b;\n    }\n    // Straight Traversal String\n    private _sts = \"\";\n    public get sts(): string {\n      return this._sts;\n    }\n    // Simmetrical Traversal String\n    private _sits = \"\";\n    public get sits() : string {\n      return this._sits;\n    }\n    // Back order Traversal String\n    private _bots = \"\";\n    public get bots() : string {\n      return this._bots;\n    }\n    // Broad Width Traversal String\n    private _bfsStr = \"\";\n    public get bfsStr () : string {\n      return this._bfsStr;\n    }\n    \n    // method for adding to a string\n    strAppend (str : string, v : string, separator=\"\") : string{\n      return str+separator+v;\n    }\n    SimmetricalTraversal(node = this._root) : boolean{\n      if (node == null){\n        return false;\n      }\n      else{\n        let l = (node.left != null) ? this.SimmetricalTraversal(node.left) : false;\n        this._sits = this.strAppend(this.sits, node.value.toString(), \" \");\n        let r = (node.right != null) ? this.SimmetricalTraversal(node.right) : false;\n      }\n    }\n    StraightTraversal(node = this._root) : boolean{\n      if (node==null){\n        return false;\n      }\n      else{\n        this._sts = this.strAppend(this.sts,node.value.toString(), \" \");\n        let l = (node.left!= null) ? this.StraightTraversal(node.left) : false;\n        let r = (node.right!= null) ? this.StraightTraversal(node.right) : false;\n      }\n    }\n    BackOrderTraversal (node = this._root) : boolean {\n      if (node == null){\n        return false;\n      }\n      else{\n        let l = (node.left != null) ? this.BackOrderTraversal(node.left) : false;\n        let r = (node.right != null) ? this.BackOrderTraversal(node.right) : false;\n        this._bots = this.strAppend(this.bots, node.value.toString(), \" \");\n      }\n    }\n    BFS (node = this._root) : boolean {\n      let queue = [];\n      if (node == null){\n        return null;\n      }\n      else{\n        queue.push(node);\n\n        while (queue.length > 0){\n          let tmp = queue.shift();\n          this._bfsStr = this.strAppend(this.bfsStr, tmp.value.toString(),\" \");\n          if (tmp.left!=null){\n            queue.push(tmp.left);\n          }\n          if (tmp.right!=null){\n            queue.push(tmp.right);\n          }\n        }\n\n      }\n    }\n    \n    public get root(): TreeNode<T> {\n      return this._root;\n    }\n    public set root(v: TreeNode<T>) {\n      this._root = v;\n    }\n    // minValue\n    minValue (root : TreeNode<T>){\n      let minv = root.value;\n      while (root.left != null){\n        minv = root.left.value;\n        root = root.left;\n      }\n      return minv\n    }\n    // recursive method to delete the node \n    deleteKey (value : any){\n      this.root = this.deleteRec(this.root, value);\n    }\n    deleteRec (root: TreeNode<T>, value : any): TreeNode<T>{\n      // if tree is empty\n      if (root == null) {\n        return null;\n      }\n      \n      if (value < root.value){\n        root.left = this.deleteRec(root.left,value);\n      }\n      else if (value > root.value){\n        root.right = this.deleteRec(root.right, value);\n      }\n\n      // root = root's key , it's to be deleted then\n      else{\n        // node with only one child or no child\n        \n        if (root.left == null){\n          return root.right;\n        }\n        else if (root.right == null){\n          return root.left;\n        }\n\n        // two children\n        root.value = this.minValue(root.right);\n\n        // delete unapropriate child\n        root.right = this.deleteRec(root.right, root.value);\n      }\n      return root;\n    }\n    // recursive method of getting the Depth of the whole Tree\n    treeDepth(node : TreeNode<T>): number {\n        // checking if the tree is empty\n        if (node != null){\n            let leftDepth = (node.left != null) ? this.treeDepth(node.left) : 0;\n            let rightDepth = (node.right != null) ? this.treeDepth(node.right) : 0;\n            return ((leftDepth > rightDepth) ? leftDepth : rightDepth) + 1\n        }\n        else{\n            return 0;\n        }\n    }\n    //balancing Stuff\n    // in the task we balancing tree when we adding a new node if the bool balance is true\n    balanceFactor (p : TreeNode<T>){\n      return (this.treeDepth(p.left) - this.treeDepth(p.right));\n    }\n    rotateRight(p : TreeNode<T>){\n      let q = p.left;\n      p.left = q.right;\n      q.right = p;\n      return q;\n    }\n    rotateLeft(q : TreeNode<T>){\n      let p = q.right;\n      q.right = p.left;\n      p.left = q;\n      return p;\n    }\n    balance (p : TreeNode<T>){\n      if (this.balanceFactor(p) == 2){\n        if (this.balanceFactor(p.right) < 0 ){\n          p.right = this.rotateRight(p.right);\n        }\n        return (this.rotateLeft(p));\n      }\n      if (this.balanceFactor(p) == -2){\n        if (this.balanceFactor(p.left) > 0){\n          p.left = this.rotateLeft(p.left);\n        }\n        return (this.rotateRight(p));\n      }\n      return p;      \n    }\n    BFSb (node = this._root) : boolean {\n      let queue = [];\n      if (node == null){\n        return null;\n      }\n      else{\n        queue.push(node);\n\n        while (queue.length > 0){\n          let tmp = queue.shift();\n          this.balance(tmp);\n          if (tmp.left!=null){\n            queue.push(tmp.left);\n          }\n          if (tmp.right!=null){\n            queue.push(tmp.right);\n          }\n        }\n\n      }\n    }\n    \n    leafCount (node = this._root): number {\n      if (node == null){\n        return 0;\n      }\n      else{\n        if (node.left == null && node.right == null){\n          return 1;\n        }\n        return this.leafCount(node.left) + this.leafCount(node.right);\n      }\n    }\n    addToTree(value: T): boolean {\n        // Create a new node\n        const newNode = new TreeNode(value);\n    \n        // If tree is empty, set new node as root\n        if (this._root == null) {\n          this._root = newNode;\n          return true;\n        } else {\n          // If tree is not empty, find the right spot for the new node\n          let currentNode = this._root;\n          let traversing = true;\n          while (traversing) {\n            if (currentNode.value == newNode.value) {\n              //Assumption: Duplicates are not accepted.\n              traversing = false;\n              return false;\n            } else if (newNode.value < currentNode.value) {\n              // Traverse left of the node\n              if (currentNode.left == null) {\n                //Add to the left of the current node\n                currentNode.left = newNode;\n                traversing = false;\n                return true;\n              } else {\n                //Traverse the left of the current node\n                currentNode = currentNode.left;\n              }\n            } else if (newNode.value > currentNode.value) {\n              // Traverse right of the node\n              if (currentNode.right == null) {\n                //Add to the right of the current node\n                currentNode.right = newNode;\n                traversing = false;\n                return true;\n              } else {\n                //Traverse the left of the current node\n                currentNode = currentNode.right;\n              }\n            }\n          }\n        }\n      }\n      position (depth : number, index : number, dr : Drawing , Node : TreeNode<T>){\n        let x = index *dr.canvas.width / (Math.pow(2,depth) + 1) ;\n        let y = depth * dr.canvas.height/ (this.treeDepth(this.root));\n        Node.x = x;\n        Node.y = y;\n        return [x,y,Node.value.toString()]\n      }\n      BFSpos (node = this._root) : Array<any> {\n        let queue = [];\n        let pos = [];\n        if (node == null){\n          return null;\n        }\n        else{\n          queue.push(node);\n  \n          while (queue.length > 0){\n            let tmp = queue.shift();\n            \n            pos.push(this.position(tmp.depthNode,tmp.index,this.dr,tmp));\n\n            if (tmp.left!=null){\n              queue.push(tmp.left);\n            }\n            if (tmp.right!=null){\n              queue.push(tmp.right);\n            }\n          }\n  \n        }\n        return pos;\n      }\n      BFSposNets (node = this._root ,canvas : HTMLCanvasElement ) : Array<any> {\n        let queue = [];\n        let pos = [];\n        let canvash = canvas;\n        let ctxh = canvash.getContext(\"2d\");\n        \n        if (node == null){\n          return null;\n        }\n        else{\n          queue.push(node);\n  \n          while (queue.length > 0){\n            let tmp = queue.shift();\n            \n\n            \n            if (tmp.left!=null){\n              queue.push(tmp.left);\n              let startPoint = this.position(tmp.depthNode, tmp.index, this.dr, tmp);\n              let endPoint = this.position(tmp.left.depthNode, tmp.left.index, this.dr, tmp.left);\n              let xStart = startPoint[0];\n              let yStart = startPoint[1];\n              let xEnd = endPoint[0];\n              let yEnd = endPoint[1];\n              ctxh.beginPath();\n              ctxh.moveTo (Number(xStart), Number(yStart));\n              ctxh.lineTo(Number(xEnd), Number(yEnd));\n              ctxh.strokeStyle = 'white';\n              ctxh.stroke();\n            }\n            if (tmp.right!=null){\n              queue.push(tmp.right);\n              let startPoint = this.position(tmp.depthNode, tmp.index, this.dr, tmp);\n              let endPoint = this.position(tmp.right.depthNode, tmp.right.index, this.dr, tmp.right);\n              let xStart = startPoint[0];\n              let yStart = startPoint[1];\n              let xEnd = endPoint[0];\n              let yEnd = endPoint[1];\n              ctxh.beginPath();\n              ctxh.moveTo (Number(xStart), Number(yStart));\n              ctxh.lineTo(Number(xEnd), Number(yEnd));\n              ctxh.strokeStyle = 'white';\n              ctxh.stroke();\n            }\n          }\n  \n        }\n        return null;\n      }\n      BFSDrawing (node = this._root) : boolean {\n        let queue = [];\n        this.root.index = 1;\n        if (node == null){\n          return null;\n        }\n        else{\n          queue.push(node);\n  \n          while (queue.length > 0){\n            let tmp = queue.shift();  \n              if (tmp.left!=null){\n                tmp.left.index = (tmp.index) * 2 - 1;\n              }\n              if (tmp.right!= null){\n                tmp.right.index = tmp.index * 2 ;\n              }\n            \n            tmp.depthNode = this.treeDepth(this.root) - this.treeDepth(tmp) ;\n            if (tmp.left!=null){\n              queue.push(tmp.left);\n            }\n            if (tmp.right!=null){\n              queue.push(tmp.right);\n            }\n          }\n  \n        }\n      }\n    storeBSTNodes (root : TreeNode<T>, arr : Array<TreeNode<T>>){\n      if (root == null){\n        return null;\n      }\n      this.storeBSTNodes(root.left, arr);\n      arr.push(root);\n      this.storeBSTNodes(root.right,arr);\n    }\n\n    dr : Drawing;\n    constructor(dr: Drawing = null) {\n      this._root = null;\n      this.dr = dr;\n    }\n  }","export {Output};\nclass Output{\n    toShow(idElem : string , valueToShow : any) {\n        let outsideLabelShow = document.getElementById(idElem)\n        outsideLabelShow.innerHTML = valueToShow.toString();\n    }\n}","export {taskConcordance};\nclass taskConcordance{\n    givenString : string;\n    words : Array<string>;\n    constructor(idInput : string, idOutput : string){\n        let outsideLabelInput = document.getElementById(idInput);\n        //outsideLabelShow.innerHTML = valueToShow.toString();\n        this.givenString = outsideLabelInput.value;\n        // Splitting the words into an array\n        let forSplit = [\"!\",\";\",\",\",\" \"];\n        this.words = this.givenString.split(/\\W/);\n        // converting to lower case\n        for (let i=0 ; i < this.words.length; i++){\n            this.words[i] = this.words[i].toLocaleLowerCase();\n        }\n        // removing nulls\n        let properWords = [];\n        for (let i = 0 ; i < this.words.length; i ++){\n            if (this.words[i]!=\"\"){\n                properWords.push(this.words[i]);\n            }\n        }\n        let outsideLabeslShow = document.getElementById(idOutput); \n        outsideLabeslShow.innerHTML = properWords.toString();\n    }\n}","import {TreeNode} from \"./BinaryTreeNode\";\nexport {Drawing};\nclass Drawing{\n    canvas : HTMLCanvasElement;\n    ctx : CanvasRenderingContext2D;\n    constructor (canvas : HTMLCanvasElement){\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\");\n        this.ctx.fillStyle = \"black\";\n        this.ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n    \n    drawingNodes(positions : Array<any>){\n        for (let i = 0 ; i < positions.length ; i++){\n            this.ctx.fillStyle = \"white\";\n            let width = 5;\n            this.ctx.fillRect(positions[i][0], positions[i][1], width,width);\n            this.ctx.font = \"30px Arial\";\n            this.ctx.fillText(positions[i][2], positions[i][0], positions[i][1]+30);\n            \n            \n        }\n    \n    }\n    drawingLinesBetweenNodes(positions : Array<any>){\n\n    }\n}","import {BinaryTree} from \"./BinaryTree\";\nimport {TreeNode} from \"./BinaryTreeNode\";\nimport {Output} from \"./Output\";\nimport {taskConcordance} from \"./taskConcordance\";\nimport {Drawing} from \"./drawing\";\n\nlet forShow = new Output();\nlet forDrawing = new Drawing(document.getElementById(\"forDrawing\"));\nlet bt = new BinaryTree(forDrawing);\n\ndocument.getElementById(\"doInput\").onclick = function concordance(){\n    let ccrdnc = new taskConcordance(\"inputConc\",\"outputConc\");\n    return null;\n}\n\ndocument.getElementById(\"draw\").onclick = function draw(){\n    bt.BFSDrawing();\n    let positions = bt.BFSpos();\n    \n    \n    forDrawing.drawingNodes(positions);\n    bt.BFSposNets(bt.root,document.getElementById(\"forDrawing\"));\n    return null;\n}\ndocument.getElementById(\"balance\").onclick = function draw(){\n    bt.balance(bt.root);\n    bt.BFSDrawing();\n    let positions = bt.BFSpos();\n    let a = 5;\n    \n    forDrawing.drawingNodes(positions);\n    \n    return null;\n}\n\nbt.addToTree(5);\nbt.addToTree(6);\nbt.addToTree(2);\nbt.addToTree(1);\nbt.addToTree(7);\nbt.addToTree(3);\n//bt.deleteKey(4);\nbt.addToTree(5.5);\nbt.addToTree(8);\nbt.addToTree(9);\nbt.addToTree(10);\n\nlet depth = bt.treeDepth(bt.root);\nlet lc = bt.leafCount();\n\nbt.StraightTraversal();\nbt.SimmetricalTraversal();\nbt.BackOrderTraversal();\nbt.BFS();\n\n\nforShow.toShow(\"depth\",depth);\nforShow.toShow(\"leafcount\", lc);\nforShow.toShow(\"straightTraversal\", bt.sts);\nforShow.toShow(\"simmetricalTraversal\",bt.sits);\nforShow.toShow(\"backorderTraversal\", bt.bots);\nforShow.toShow(\"broadwidthTraversal\", bt.bfsStr);"]}